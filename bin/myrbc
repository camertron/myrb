#! /usr/bin/env ruby

$:.push(File.expand_path('./lib'))

require 'pathname'
require 'optparse'
require 'fileutils'
require 'myrb'

class MyrbCLI
  def self.parse(argv)
    if argv.empty?
      puts 'Please pass a file or directory to transpile'
      exit 1
    end

    options = {
      annotations_path: Myrb.default_annotations_path,
    }

    if argv.first != '-h' && argv.first != '--help'
      options[:in_path] = argv.shift
    end

    parser = OptionParser.new do |opts|
      opts.banner = "Usage: myrbc path [options]"

      oneline(<<~DESC).tap do |desc|
        Write RBS files to this directory (default: #{options[:annotations_path]}).
      DESC
        opts.on('-dDIR', '--annotations-path=DIR', desc) do |annotations_path|
          options[:annotations_path] = annotations_path
        end
      end

      opts.on('-h', '--help', 'Prints this help info') do
        puts opts
        exit
      end
    end

    parser.parse(argv)
    new(options)
  end

  def self.oneline(str)
    str.split("\n").join(' ')
  end

  def initialize(options)
    @options = options
  end

  def validate
    unless File.exist?(in_path)
      puts "Could not find file at '#{in_path}'"
      exit 1
    end
  end

  def each_file(&block)
    files = if in_path.directory?
      in_path.glob(File.join('**', '*.rb'))
    else
      [in_path]
    end

    files.each do |file|
      annotation_file = begin
        relative_file = file.relative_path_from(Dir.getwd)
        annotations_path.join(relative_file).sub_ext(".rbs")
      end

      yield file.to_s, annotation_file.to_s
    end
  end

  def in_path
    @in_path ||= Pathname(@options[:in_path]).expand_path
  end

  private

  def annotations_path
    @annotations_path ||= Pathname(@options[:annotations_path]).expand_path
  end
end

cli = MyrbCLI.parse(ARGV)
cli.validate

cli.each_file do |in_file, annotation_file|
  file = Myrb::AnnotatedFile.new(in_file)

  visitor = Myrb::RBSVisitor.new
  annotations = visitor.visit(file.annotations, 0)

  FileUtils.mkdir_p(File.dirname(annotation_file))
  ::File.write(annotation_file, annotations)
  puts "Wrote #{annotation_file}"
end
