# frozen_string_literal: true

module Foo
  module Boo
  end

  module Biz
  end

  module Baz
  end

  class Thing
  end

  class TestComponent[K, V]
    CONST: String = "foo"

    @title: Array[Numeric]
    @thing: Hash[K, String | Numeric]

    attr_accessor foobars: Array[Hash[String, Thing?]]

    prepend Boo
    include Biz
    extend Baz

    def initialize(title: Array[Numeric] = foo('title'.upcase), thing: Hash[K, String | Numeric] = {}) -> void
      @title = title
      @thing = thing
    end

    def whatever[U](arg: String?)
    end

    def keyword_args(pos_arg: String, *, kwarg: Numeric = 1, other_kwarg: Float)
    end

    def another(foo, *)
    end

    def each(&block: { (foo: String, bar: Numeric) -> String }) -> nil
    end

    private def render -> String
      ""
    end
  end
end
